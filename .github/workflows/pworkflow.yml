name: Secure Code Analysis and Docker Build

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  # ðŸ”¹ Job pour lister toutes les fonctions dans le dossier ./functions/
  list-functions:
    name: List Functions
    runs-on: ubuntu-latest
    outputs:
      functions: ${{ steps.list.outputs.functions }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List function directories
        id: list
        run: |
          functions=$(ls -d functions/*/ | sed 's|functions/||g' | jq -R -s -c 'split("\n")[:-1]')
          echo "Fonctions trouvÃ©es : $functions"
          echo "functions=$functions" >> "$GITHUB_OUTPUT"

  # ðŸ”¹ Job unique qui exÃ©cute tous les contrÃ´les de sÃ©curitÃ© et la build pour chaque fonction
  process-function:
    name: Process Function - ${{ matrix.function }}
    runs-on: ubuntu-latest
    needs: list-functions
    strategy:
      matrix:
        function: ${{ fromJson(needs.list-functions.outputs.functions) }}  # Utilise la liste de fonctions gÃ©nÃ©rÃ©e

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ðŸ”¹ Ã‰tape 1 : Scan des secrets avec GitGuardian
      - name: GitGuardian Secret Detection
        uses: GitGuardian/ggshield-action@v1
        env:
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
        with:
          paths: "functions/${{ matrix.function }}"  # Analyse spÃ©cifique pour chaque fonction

      # ðŸ”¹ Ã‰tape 2 : Analyse de sÃ©curitÃ© avec Bandit
      - name: Bandit Security Analysis
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit Analysis
        run: |
          bandit -r functions/${{ matrix.function }} -ll -iii \
            -f custom \
            --msg-template "{line}: {severity}: {test_id}: {msg}"

      # ðŸ”¹ Ã‰tape 3 : DÃ©tection des secrets avec Gitleaks
      - name: Gitleaks Secret Detection
        uses: gitleaks/gitleaks-action@v2
        with:
          args: "--redact --source=functions/${{ matrix.function }} --exit-code 1"

      # ðŸ”¹ Ã‰tape 4 : Build et Scan de l'image Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set FUNCTION_NAME
        run: echo "FUNCTION_NAME=$(basename '${{ matrix.function }}')" >> $GITHUB_ENV

      - name: Build Docker image for ${{ matrix.function }}
        working-directory: ./functions/${{ matrix.function }}
        run: |
          FUNCTION_NAME=$(basename "${{ matrix.function }}")
          docker build -t ${{ secrets.MY_CONTAINER }}/$FUNCTION_NAME:latest .

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.MY_CONTAINER }}/$FUNCTION_NAME:latest
          ignore-unfixed: true
          severity: HIGH,CRITICAL
          exit-code: 1

      - name: Push Docker image
        if: success()
        run: |
          docker push ${{ secrets.MY_CONTAINER }}/$FUNCTION_NAME:latest
