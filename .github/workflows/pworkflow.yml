name: Secure Code Analysis and Docker Build

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  gitguardian-scan:
    name: GitGuardian Secret Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Nécessaire pour l’analyse historique

      - name: Run GitGuardian Scan
        uses: GitGuardian/ggshield-action@v1
        env:
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
        with:
          paths: "./functions"  # Analyse spécifique du répertoire

  bandit-scan:
    name: Bandit Security Analysis
    runs-on: ubuntu-latest
    needs: gitguardian-scan  # Dépend de GitGuardian

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit Analysis
        run: |
          bandit -r functions/llmidgenerator/ -ll -iii \
            -f custom \
            --msg-template "{line}: {severity}: {test_id}: {msg}"

  gitleaks-scan:
    name: Gitleaks Secret Detection
    runs-on: ubuntu-latest
    needs: bandit-scan  # Dépend de Bandit

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: "--redact --source=./functions --exit-code 1"

  build-and-scan:
    name: Build and Scan Docker Image
    runs-on: ubuntu-latest
    needs: gitleaks-scan  # Dépend du scan Gitleaks (doit réussir)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Récupère le code source

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        working-directory: ./functions/llmidgenerator
        run: |
          docker build -t ${{ secrets.MY_CONTAINER }}/secure-image:latest .

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.MY_CONTAINER }}/secure-image:latest
          ignore-unfixed: true
          severity: HIGH,CRITICAL
          exit-code: 1

      - name: Push Docker image
        if: success()  # Exécute seulement si Trivy ne détecte pas d'erreurs bloquantes
        run: |
          docker push ${{ secrets.MY_CONTAINER }}/secure-image:latest
